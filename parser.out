Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DEFENITION_LOGICO
    DEFINITION_CARACTER
    DEFINITION_INTEIRO
    DEFINITION_REAL
    FIM_FUNCAO
    FUNCAO

Grammar

Rule 0     S' -> S
Rule 1     S -> LstV ;
Rule 2     LstV -> LstV ; command
Rule 3     LstV -> com_list
Rule 4     com_list -> command
Rule 5     com_list -> com_list command
Rule 6     command -> V STRING
Rule 7     command -> V STRING ATRIBUICAO var_list
Rule 8     command -> ESCREVER STRING ;
Rule 9     command -> ESCREVER e
Rule 10    command -> ESCREVER var_list
Rule 11    command -> ID ATRIBUICAO e_list
Rule 12    command -> ciclo_for
Rule 13    command -> if
Rule 14    ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
Rule 15    if -> SE e ENTAO com_list FIM_SE
Rule 16    if -> SE e ENTAO com_list SENAO com_list FIM_SE
Rule 17    var_list -> VAR
Rule 18    var_list -> var_list , VAR
Rule 19    e_list -> e
Rule 20    e_list -> e_list , e
Rule 21    e -> ID
Rule 22    e -> REAL
Rule 23    e -> INTEIRO
Rule 24    e -> CARACTER
Rule 25    e -> condicao
Rule 26    e -> - e
Rule 27    e -> e * e
Rule 28    e -> e / e
Rule 29    e -> e + e
Rule 30    e -> e - e
Rule 31    e -> logico
Rule 32    e -> e OR e
Rule 33    e -> e AND e
Rule 34    e -> e XOR e
Rule 35    e -> ( e )
Rule 36    condicao -> e SMALLER e
Rule 37    condicao -> e SMALLER_EQUAL e
Rule 38    condicao -> e BIGGER e
Rule 39    condicao -> e BIGGER_EQUAL e
Rule 40    condicao -> e EQUAL e
Rule 41    condicao -> e NOT_EQUAL e
Rule 42    logico -> TRUE
Rule 43    logico -> FALSE
Rule 44    logico -> NOT logico

Terminals, with rules where they appear

(                    : 35
)                    : 35
*                    : 27
+                    : 29
,                    : 18 20
-                    : 26 30
/                    : 28
;                    : 1 2 8
AND                  : 33
ATRIBUICAO           : 7 11
BIGGER               : 38
BIGGER_EQUAL         : 39
CARACTER             : 24
DEFENITION_LOGICO    : 
DEFINITION_CARACTER  : 
DEFINITION_INTEIRO   : 
DEFINITION_REAL      : 
ELIPSIS              : 14
EM                   : 14
ENTAO                : 15 16
EQUAL                : 40
ESCREVER             : 8 9 10
FALSE                : 43
FAZER                : 14
FIM                  : 14
FIM_FUNCAO           : 
FIM_SE               : 15 16
FUNCAO               : 
ID                   : 11 14 21
INTEIRO              : 14 14 23
NOT                  : 44
NOT_EQUAL            : 41
OR                   : 32
PARA                 : 14
REAL                 : 22
SE                   : 15 16
SENAO                : 16
SMALLER              : 36
SMALLER_EQUAL        : 37
STRING               : 6 7 8
TRUE                 : 42
V                    : 6 7
VAR                  : 17 18
XOR                  : 34
[                    : 14
]                    : 14
error                : 

Nonterminals, with rules where they appear

LstV                 : 1 2
S                    : 0
ciclo_for            : 12
com_list             : 3 5 14 15 16 16
command              : 2 4 5
condicao             : 25
e                    : 9 15 16 19 20 26 27 27 28 28 29 29 30 30 32 32 33 33 34 34 35 36 36 37 37 38 38 39 39 40 40 41 41
e_list               : 11 20
if                   : 13
logico               : 31 44
var_list             : 7 10 18

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . LstV ;
    (2) LstV -> . LstV ; command
    (3) LstV -> . com_list
    (4) com_list -> . command
    (5) com_list -> . com_list command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    S                              shift and go to state 1
    LstV                           shift and go to state 2
    command                        shift and go to state 3
    com_list                       shift and go to state 4
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 1

    (0) S' -> S .



state 2

    (1) S -> LstV . ;
    (2) LstV -> LstV . ; command

    ;               shift and go to state 12


state 3

    (4) com_list -> command .

    V               reduce using rule 4 (com_list -> command .)
    ESCREVER        reduce using rule 4 (com_list -> command .)
    ID              reduce using rule 4 (com_list -> command .)
    PARA            reduce using rule 4 (com_list -> command .)
    SE              reduce using rule 4 (com_list -> command .)
    ;               reduce using rule 4 (com_list -> command .)
    FIM_SE          reduce using rule 4 (com_list -> command .)
    SENAO           reduce using rule 4 (com_list -> command .)
    FIM             reduce using rule 4 (com_list -> command .)


state 4

    (3) LstV -> com_list .
    (5) com_list -> com_list . command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    ;               reduce using rule 3 (LstV -> com_list .)
    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    command                        shift and go to state 13
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 5

    (6) command -> V . STRING
    (7) command -> V . STRING ATRIBUICAO var_list

    STRING          shift and go to state 14


state 6

    (8) command -> ESCREVER . STRING ;
    (9) command -> ESCREVER . e
    (10) command -> ESCREVER . var_list
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (17) var_list -> . VAR
    (18) var_list -> . var_list , VAR
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    STRING          shift and go to state 15
    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    VAR             shift and go to state 26
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 16
    var_list                       shift and go to state 17
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 7

    (11) command -> ID . ATRIBUICAO e_list

    ATRIBUICAO      shift and go to state 30


state 8

    (12) command -> ciclo_for .

    V               reduce using rule 12 (command -> ciclo_for .)
    ESCREVER        reduce using rule 12 (command -> ciclo_for .)
    ID              reduce using rule 12 (command -> ciclo_for .)
    PARA            reduce using rule 12 (command -> ciclo_for .)
    SE              reduce using rule 12 (command -> ciclo_for .)
    ;               reduce using rule 12 (command -> ciclo_for .)
    FIM_SE          reduce using rule 12 (command -> ciclo_for .)
    SENAO           reduce using rule 12 (command -> ciclo_for .)
    FIM             reduce using rule 12 (command -> ciclo_for .)


state 9

    (13) command -> if .

    V               reduce using rule 13 (command -> if .)
    ESCREVER        reduce using rule 13 (command -> if .)
    ID              reduce using rule 13 (command -> if .)
    PARA            reduce using rule 13 (command -> if .)
    SE              reduce using rule 13 (command -> if .)
    ;               reduce using rule 13 (command -> if .)
    FIM_SE          reduce using rule 13 (command -> if .)
    SENAO           reduce using rule 13 (command -> if .)
    FIM             reduce using rule 13 (command -> if .)


state 10

    (14) ciclo_for -> PARA . ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM

    ID              shift and go to state 31


state 11

    (15) if -> SE . e ENTAO com_list FIM_SE
    (16) if -> SE . e ENTAO com_list SENAO com_list FIM_SE
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 32
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 12

    (1) S -> LstV ; .
    (2) LstV -> LstV ; . command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    $end            reduce using rule 1 (S -> LstV ; .)
    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    command                        shift and go to state 33
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 13

    (5) com_list -> com_list command .

    V               reduce using rule 5 (com_list -> com_list command .)
    ESCREVER        reduce using rule 5 (com_list -> com_list command .)
    ID              reduce using rule 5 (com_list -> com_list command .)
    PARA            reduce using rule 5 (com_list -> com_list command .)
    SE              reduce using rule 5 (com_list -> com_list command .)
    ;               reduce using rule 5 (com_list -> com_list command .)
    FIM_SE          reduce using rule 5 (com_list -> com_list command .)
    SENAO           reduce using rule 5 (com_list -> com_list command .)
    FIM             reduce using rule 5 (com_list -> com_list command .)


state 14

    (6) command -> V STRING .
    (7) command -> V STRING . ATRIBUICAO var_list

    V               reduce using rule 6 (command -> V STRING .)
    ESCREVER        reduce using rule 6 (command -> V STRING .)
    ID              reduce using rule 6 (command -> V STRING .)
    PARA            reduce using rule 6 (command -> V STRING .)
    SE              reduce using rule 6 (command -> V STRING .)
    ;               reduce using rule 6 (command -> V STRING .)
    FIM_SE          reduce using rule 6 (command -> V STRING .)
    SENAO           reduce using rule 6 (command -> V STRING .)
    FIM             reduce using rule 6 (command -> V STRING .)
    ATRIBUICAO      shift and go to state 34


state 15

    (8) command -> ESCREVER STRING . ;

    ;               shift and go to state 35


state 16

    (9) command -> ESCREVER e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    V               reduce using rule 9 (command -> ESCREVER e .)
    ESCREVER        reduce using rule 9 (command -> ESCREVER e .)
    ID              reduce using rule 9 (command -> ESCREVER e .)
    PARA            reduce using rule 9 (command -> ESCREVER e .)
    SE              reduce using rule 9 (command -> ESCREVER e .)
    ;               reduce using rule 9 (command -> ESCREVER e .)
    FIM_SE          reduce using rule 9 (command -> ESCREVER e .)
    SENAO           reduce using rule 9 (command -> ESCREVER e .)
    FIM             reduce using rule 9 (command -> ESCREVER e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    XOR             shift and go to state 42
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48


state 17

    (10) command -> ESCREVER var_list .
    (18) var_list -> var_list . , VAR

    V               reduce using rule 10 (command -> ESCREVER var_list .)
    ESCREVER        reduce using rule 10 (command -> ESCREVER var_list .)
    ID              reduce using rule 10 (command -> ESCREVER var_list .)
    PARA            reduce using rule 10 (command -> ESCREVER var_list .)
    SE              reduce using rule 10 (command -> ESCREVER var_list .)
    ;               reduce using rule 10 (command -> ESCREVER var_list .)
    FIM_SE          reduce using rule 10 (command -> ESCREVER var_list .)
    SENAO           reduce using rule 10 (command -> ESCREVER var_list .)
    FIM             reduce using rule 10 (command -> ESCREVER var_list .)
    ,               shift and go to state 49


state 18

    (21) e -> ID .

    *               reduce using rule 21 (e -> ID .)
    /               reduce using rule 21 (e -> ID .)
    +               reduce using rule 21 (e -> ID .)
    -               reduce using rule 21 (e -> ID .)
    OR              reduce using rule 21 (e -> ID .)
    AND             reduce using rule 21 (e -> ID .)
    XOR             reduce using rule 21 (e -> ID .)
    SMALLER         reduce using rule 21 (e -> ID .)
    SMALLER_EQUAL   reduce using rule 21 (e -> ID .)
    BIGGER          reduce using rule 21 (e -> ID .)
    BIGGER_EQUAL    reduce using rule 21 (e -> ID .)
    EQUAL           reduce using rule 21 (e -> ID .)
    NOT_EQUAL       reduce using rule 21 (e -> ID .)
    V               reduce using rule 21 (e -> ID .)
    ESCREVER        reduce using rule 21 (e -> ID .)
    ID              reduce using rule 21 (e -> ID .)
    PARA            reduce using rule 21 (e -> ID .)
    SE              reduce using rule 21 (e -> ID .)
    ;               reduce using rule 21 (e -> ID .)
    FIM_SE          reduce using rule 21 (e -> ID .)
    SENAO           reduce using rule 21 (e -> ID .)
    FIM             reduce using rule 21 (e -> ID .)
    ENTAO           reduce using rule 21 (e -> ID .)
    )               reduce using rule 21 (e -> ID .)
    ,               reduce using rule 21 (e -> ID .)


state 19

    (22) e -> REAL .

    *               reduce using rule 22 (e -> REAL .)
    /               reduce using rule 22 (e -> REAL .)
    +               reduce using rule 22 (e -> REAL .)
    -               reduce using rule 22 (e -> REAL .)
    OR              reduce using rule 22 (e -> REAL .)
    AND             reduce using rule 22 (e -> REAL .)
    XOR             reduce using rule 22 (e -> REAL .)
    SMALLER         reduce using rule 22 (e -> REAL .)
    SMALLER_EQUAL   reduce using rule 22 (e -> REAL .)
    BIGGER          reduce using rule 22 (e -> REAL .)
    BIGGER_EQUAL    reduce using rule 22 (e -> REAL .)
    EQUAL           reduce using rule 22 (e -> REAL .)
    NOT_EQUAL       reduce using rule 22 (e -> REAL .)
    V               reduce using rule 22 (e -> REAL .)
    ESCREVER        reduce using rule 22 (e -> REAL .)
    ID              reduce using rule 22 (e -> REAL .)
    PARA            reduce using rule 22 (e -> REAL .)
    SE              reduce using rule 22 (e -> REAL .)
    ;               reduce using rule 22 (e -> REAL .)
    FIM_SE          reduce using rule 22 (e -> REAL .)
    SENAO           reduce using rule 22 (e -> REAL .)
    FIM             reduce using rule 22 (e -> REAL .)
    ENTAO           reduce using rule 22 (e -> REAL .)
    )               reduce using rule 22 (e -> REAL .)
    ,               reduce using rule 22 (e -> REAL .)


state 20

    (23) e -> INTEIRO .

    *               reduce using rule 23 (e -> INTEIRO .)
    /               reduce using rule 23 (e -> INTEIRO .)
    +               reduce using rule 23 (e -> INTEIRO .)
    -               reduce using rule 23 (e -> INTEIRO .)
    OR              reduce using rule 23 (e -> INTEIRO .)
    AND             reduce using rule 23 (e -> INTEIRO .)
    XOR             reduce using rule 23 (e -> INTEIRO .)
    SMALLER         reduce using rule 23 (e -> INTEIRO .)
    SMALLER_EQUAL   reduce using rule 23 (e -> INTEIRO .)
    BIGGER          reduce using rule 23 (e -> INTEIRO .)
    BIGGER_EQUAL    reduce using rule 23 (e -> INTEIRO .)
    EQUAL           reduce using rule 23 (e -> INTEIRO .)
    NOT_EQUAL       reduce using rule 23 (e -> INTEIRO .)
    V               reduce using rule 23 (e -> INTEIRO .)
    ESCREVER        reduce using rule 23 (e -> INTEIRO .)
    ID              reduce using rule 23 (e -> INTEIRO .)
    PARA            reduce using rule 23 (e -> INTEIRO .)
    SE              reduce using rule 23 (e -> INTEIRO .)
    ;               reduce using rule 23 (e -> INTEIRO .)
    FIM_SE          reduce using rule 23 (e -> INTEIRO .)
    SENAO           reduce using rule 23 (e -> INTEIRO .)
    FIM             reduce using rule 23 (e -> INTEIRO .)
    ENTAO           reduce using rule 23 (e -> INTEIRO .)
    )               reduce using rule 23 (e -> INTEIRO .)
    ,               reduce using rule 23 (e -> INTEIRO .)


state 21

    (24) e -> CARACTER .

    *               reduce using rule 24 (e -> CARACTER .)
    /               reduce using rule 24 (e -> CARACTER .)
    +               reduce using rule 24 (e -> CARACTER .)
    -               reduce using rule 24 (e -> CARACTER .)
    OR              reduce using rule 24 (e -> CARACTER .)
    AND             reduce using rule 24 (e -> CARACTER .)
    XOR             reduce using rule 24 (e -> CARACTER .)
    SMALLER         reduce using rule 24 (e -> CARACTER .)
    SMALLER_EQUAL   reduce using rule 24 (e -> CARACTER .)
    BIGGER          reduce using rule 24 (e -> CARACTER .)
    BIGGER_EQUAL    reduce using rule 24 (e -> CARACTER .)
    EQUAL           reduce using rule 24 (e -> CARACTER .)
    NOT_EQUAL       reduce using rule 24 (e -> CARACTER .)
    V               reduce using rule 24 (e -> CARACTER .)
    ESCREVER        reduce using rule 24 (e -> CARACTER .)
    ID              reduce using rule 24 (e -> CARACTER .)
    PARA            reduce using rule 24 (e -> CARACTER .)
    SE              reduce using rule 24 (e -> CARACTER .)
    ;               reduce using rule 24 (e -> CARACTER .)
    FIM_SE          reduce using rule 24 (e -> CARACTER .)
    SENAO           reduce using rule 24 (e -> CARACTER .)
    FIM             reduce using rule 24 (e -> CARACTER .)
    ENTAO           reduce using rule 24 (e -> CARACTER .)
    )               reduce using rule 24 (e -> CARACTER .)
    ,               reduce using rule 24 (e -> CARACTER .)


state 22

    (25) e -> condicao .

    *               reduce using rule 25 (e -> condicao .)
    /               reduce using rule 25 (e -> condicao .)
    +               reduce using rule 25 (e -> condicao .)
    -               reduce using rule 25 (e -> condicao .)
    OR              reduce using rule 25 (e -> condicao .)
    AND             reduce using rule 25 (e -> condicao .)
    XOR             reduce using rule 25 (e -> condicao .)
    SMALLER         reduce using rule 25 (e -> condicao .)
    SMALLER_EQUAL   reduce using rule 25 (e -> condicao .)
    BIGGER          reduce using rule 25 (e -> condicao .)
    BIGGER_EQUAL    reduce using rule 25 (e -> condicao .)
    EQUAL           reduce using rule 25 (e -> condicao .)
    NOT_EQUAL       reduce using rule 25 (e -> condicao .)
    V               reduce using rule 25 (e -> condicao .)
    ESCREVER        reduce using rule 25 (e -> condicao .)
    ID              reduce using rule 25 (e -> condicao .)
    PARA            reduce using rule 25 (e -> condicao .)
    SE              reduce using rule 25 (e -> condicao .)
    ;               reduce using rule 25 (e -> condicao .)
    FIM_SE          reduce using rule 25 (e -> condicao .)
    SENAO           reduce using rule 25 (e -> condicao .)
    FIM             reduce using rule 25 (e -> condicao .)
    ENTAO           reduce using rule 25 (e -> condicao .)
    )               reduce using rule 25 (e -> condicao .)
    ,               reduce using rule 25 (e -> condicao .)


state 23

    (26) e -> - . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 50
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 24

    (31) e -> logico .

    *               reduce using rule 31 (e -> logico .)
    /               reduce using rule 31 (e -> logico .)
    +               reduce using rule 31 (e -> logico .)
    -               reduce using rule 31 (e -> logico .)
    OR              reduce using rule 31 (e -> logico .)
    AND             reduce using rule 31 (e -> logico .)
    XOR             reduce using rule 31 (e -> logico .)
    SMALLER         reduce using rule 31 (e -> logico .)
    SMALLER_EQUAL   reduce using rule 31 (e -> logico .)
    BIGGER          reduce using rule 31 (e -> logico .)
    BIGGER_EQUAL    reduce using rule 31 (e -> logico .)
    EQUAL           reduce using rule 31 (e -> logico .)
    NOT_EQUAL       reduce using rule 31 (e -> logico .)
    V               reduce using rule 31 (e -> logico .)
    ESCREVER        reduce using rule 31 (e -> logico .)
    ID              reduce using rule 31 (e -> logico .)
    PARA            reduce using rule 31 (e -> logico .)
    SE              reduce using rule 31 (e -> logico .)
    ;               reduce using rule 31 (e -> logico .)
    FIM_SE          reduce using rule 31 (e -> logico .)
    SENAO           reduce using rule 31 (e -> logico .)
    FIM             reduce using rule 31 (e -> logico .)
    ENTAO           reduce using rule 31 (e -> logico .)
    )               reduce using rule 31 (e -> logico .)
    ,               reduce using rule 31 (e -> logico .)


state 25

    (35) e -> ( . e )
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 51
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 26

    (17) var_list -> VAR .

    ,               reduce using rule 17 (var_list -> VAR .)
    V               reduce using rule 17 (var_list -> VAR .)
    ESCREVER        reduce using rule 17 (var_list -> VAR .)
    ID              reduce using rule 17 (var_list -> VAR .)
    PARA            reduce using rule 17 (var_list -> VAR .)
    SE              reduce using rule 17 (var_list -> VAR .)
    ;               reduce using rule 17 (var_list -> VAR .)
    FIM_SE          reduce using rule 17 (var_list -> VAR .)
    SENAO           reduce using rule 17 (var_list -> VAR .)
    FIM             reduce using rule 17 (var_list -> VAR .)


state 27

    (42) logico -> TRUE .

    *               reduce using rule 42 (logico -> TRUE .)
    /               reduce using rule 42 (logico -> TRUE .)
    +               reduce using rule 42 (logico -> TRUE .)
    -               reduce using rule 42 (logico -> TRUE .)
    OR              reduce using rule 42 (logico -> TRUE .)
    AND             reduce using rule 42 (logico -> TRUE .)
    XOR             reduce using rule 42 (logico -> TRUE .)
    SMALLER         reduce using rule 42 (logico -> TRUE .)
    SMALLER_EQUAL   reduce using rule 42 (logico -> TRUE .)
    BIGGER          reduce using rule 42 (logico -> TRUE .)
    BIGGER_EQUAL    reduce using rule 42 (logico -> TRUE .)
    EQUAL           reduce using rule 42 (logico -> TRUE .)
    NOT_EQUAL       reduce using rule 42 (logico -> TRUE .)
    V               reduce using rule 42 (logico -> TRUE .)
    ESCREVER        reduce using rule 42 (logico -> TRUE .)
    ID              reduce using rule 42 (logico -> TRUE .)
    PARA            reduce using rule 42 (logico -> TRUE .)
    SE              reduce using rule 42 (logico -> TRUE .)
    ;               reduce using rule 42 (logico -> TRUE .)
    FIM_SE          reduce using rule 42 (logico -> TRUE .)
    SENAO           reduce using rule 42 (logico -> TRUE .)
    FIM             reduce using rule 42 (logico -> TRUE .)
    ENTAO           reduce using rule 42 (logico -> TRUE .)
    )               reduce using rule 42 (logico -> TRUE .)
    ,               reduce using rule 42 (logico -> TRUE .)


state 28

    (43) logico -> FALSE .

    *               reduce using rule 43 (logico -> FALSE .)
    /               reduce using rule 43 (logico -> FALSE .)
    +               reduce using rule 43 (logico -> FALSE .)
    -               reduce using rule 43 (logico -> FALSE .)
    OR              reduce using rule 43 (logico -> FALSE .)
    AND             reduce using rule 43 (logico -> FALSE .)
    XOR             reduce using rule 43 (logico -> FALSE .)
    SMALLER         reduce using rule 43 (logico -> FALSE .)
    SMALLER_EQUAL   reduce using rule 43 (logico -> FALSE .)
    BIGGER          reduce using rule 43 (logico -> FALSE .)
    BIGGER_EQUAL    reduce using rule 43 (logico -> FALSE .)
    EQUAL           reduce using rule 43 (logico -> FALSE .)
    NOT_EQUAL       reduce using rule 43 (logico -> FALSE .)
    V               reduce using rule 43 (logico -> FALSE .)
    ESCREVER        reduce using rule 43 (logico -> FALSE .)
    ID              reduce using rule 43 (logico -> FALSE .)
    PARA            reduce using rule 43 (logico -> FALSE .)
    SE              reduce using rule 43 (logico -> FALSE .)
    ;               reduce using rule 43 (logico -> FALSE .)
    FIM_SE          reduce using rule 43 (logico -> FALSE .)
    SENAO           reduce using rule 43 (logico -> FALSE .)
    FIM             reduce using rule 43 (logico -> FALSE .)
    ENTAO           reduce using rule 43 (logico -> FALSE .)
    )               reduce using rule 43 (logico -> FALSE .)
    ,               reduce using rule 43 (logico -> FALSE .)


state 29

    (44) logico -> NOT . logico
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    logico                         shift and go to state 52

state 30

    (11) command -> ID ATRIBUICAO . e_list
    (19) e_list -> . e
    (20) e_list -> . e_list , e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e_list                         shift and go to state 53
    e                              shift and go to state 54
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 31

    (14) ciclo_for -> PARA ID . EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM

    EM              shift and go to state 55


state 32

    (15) if -> SE e . ENTAO com_list FIM_SE
    (16) if -> SE e . ENTAO com_list SENAO com_list FIM_SE
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    ENTAO           shift and go to state 56
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    XOR             shift and go to state 42
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48


state 33

    (2) LstV -> LstV ; command .

    ;               reduce using rule 2 (LstV -> LstV ; command .)


state 34

    (7) command -> V STRING ATRIBUICAO . var_list
    (17) var_list -> . VAR
    (18) var_list -> . var_list , VAR

    VAR             shift and go to state 26

    var_list                       shift and go to state 57

state 35

    (8) command -> ESCREVER STRING ; .

    V               reduce using rule 8 (command -> ESCREVER STRING ; .)
    ESCREVER        reduce using rule 8 (command -> ESCREVER STRING ; .)
    ID              reduce using rule 8 (command -> ESCREVER STRING ; .)
    PARA            reduce using rule 8 (command -> ESCREVER STRING ; .)
    SE              reduce using rule 8 (command -> ESCREVER STRING ; .)
    ;               reduce using rule 8 (command -> ESCREVER STRING ; .)
    FIM_SE          reduce using rule 8 (command -> ESCREVER STRING ; .)
    SENAO           reduce using rule 8 (command -> ESCREVER STRING ; .)
    FIM             reduce using rule 8 (command -> ESCREVER STRING ; .)


state 36

    (27) e -> e * . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 58
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 37

    (28) e -> e / . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 59
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 38

    (29) e -> e + . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 60
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 39

    (30) e -> e - . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 61
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 40

    (32) e -> e OR . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 62
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 41

    (33) e -> e AND . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 63
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 42

    (34) e -> e XOR . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 64
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 43

    (36) condicao -> e SMALLER . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 65
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 44

    (37) condicao -> e SMALLER_EQUAL . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 66
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 45

    (38) condicao -> e BIGGER . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 67
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 46

    (39) condicao -> e BIGGER_EQUAL . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 68
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 47

    (40) condicao -> e EQUAL . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 69
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 48

    (41) condicao -> e NOT_EQUAL . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 70
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 49

    (18) var_list -> var_list , . VAR

    VAR             shift and go to state 71


state 50

    (26) e -> - e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    *               reduce using rule 26 (e -> - e .)
    /               reduce using rule 26 (e -> - e .)
    +               reduce using rule 26 (e -> - e .)
    -               reduce using rule 26 (e -> - e .)
    OR              reduce using rule 26 (e -> - e .)
    AND             reduce using rule 26 (e -> - e .)
    XOR             reduce using rule 26 (e -> - e .)
    SMALLER         reduce using rule 26 (e -> - e .)
    SMALLER_EQUAL   reduce using rule 26 (e -> - e .)
    BIGGER          reduce using rule 26 (e -> - e .)
    BIGGER_EQUAL    reduce using rule 26 (e -> - e .)
    EQUAL           reduce using rule 26 (e -> - e .)
    NOT_EQUAL       reduce using rule 26 (e -> - e .)
    V               reduce using rule 26 (e -> - e .)
    ESCREVER        reduce using rule 26 (e -> - e .)
    ID              reduce using rule 26 (e -> - e .)
    PARA            reduce using rule 26 (e -> - e .)
    SE              reduce using rule 26 (e -> - e .)
    ;               reduce using rule 26 (e -> - e .)
    FIM_SE          reduce using rule 26 (e -> - e .)
    SENAO           reduce using rule 26 (e -> - e .)
    FIM             reduce using rule 26 (e -> - e .)
    ENTAO           reduce using rule 26 (e -> - e .)
    )               reduce using rule 26 (e -> - e .)
    ,               reduce using rule 26 (e -> - e .)

  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 51

    (35) e -> ( e . )
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    )               shift and go to state 72
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    XOR             shift and go to state 42
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48


state 52

    (44) logico -> NOT logico .

    *               reduce using rule 44 (logico -> NOT logico .)
    /               reduce using rule 44 (logico -> NOT logico .)
    +               reduce using rule 44 (logico -> NOT logico .)
    -               reduce using rule 44 (logico -> NOT logico .)
    OR              reduce using rule 44 (logico -> NOT logico .)
    AND             reduce using rule 44 (logico -> NOT logico .)
    XOR             reduce using rule 44 (logico -> NOT logico .)
    SMALLER         reduce using rule 44 (logico -> NOT logico .)
    SMALLER_EQUAL   reduce using rule 44 (logico -> NOT logico .)
    BIGGER          reduce using rule 44 (logico -> NOT logico .)
    BIGGER_EQUAL    reduce using rule 44 (logico -> NOT logico .)
    EQUAL           reduce using rule 44 (logico -> NOT logico .)
    NOT_EQUAL       reduce using rule 44 (logico -> NOT logico .)
    V               reduce using rule 44 (logico -> NOT logico .)
    ESCREVER        reduce using rule 44 (logico -> NOT logico .)
    ID              reduce using rule 44 (logico -> NOT logico .)
    PARA            reduce using rule 44 (logico -> NOT logico .)
    SE              reduce using rule 44 (logico -> NOT logico .)
    ;               reduce using rule 44 (logico -> NOT logico .)
    FIM_SE          reduce using rule 44 (logico -> NOT logico .)
    SENAO           reduce using rule 44 (logico -> NOT logico .)
    FIM             reduce using rule 44 (logico -> NOT logico .)
    ENTAO           reduce using rule 44 (logico -> NOT logico .)
    )               reduce using rule 44 (logico -> NOT logico .)
    ,               reduce using rule 44 (logico -> NOT logico .)


state 53

    (11) command -> ID ATRIBUICAO e_list .
    (20) e_list -> e_list . , e

    V               reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    ESCREVER        reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    ID              reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    PARA            reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    SE              reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    ;               reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    FIM_SE          reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    SENAO           reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    FIM             reduce using rule 11 (command -> ID ATRIBUICAO e_list .)
    ,               shift and go to state 73


state 54

    (19) e_list -> e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    ,               reduce using rule 19 (e_list -> e .)
    V               reduce using rule 19 (e_list -> e .)
    ESCREVER        reduce using rule 19 (e_list -> e .)
    ID              reduce using rule 19 (e_list -> e .)
    PARA            reduce using rule 19 (e_list -> e .)
    SE              reduce using rule 19 (e_list -> e .)
    ;               reduce using rule 19 (e_list -> e .)
    FIM_SE          reduce using rule 19 (e_list -> e .)
    SENAO           reduce using rule 19 (e_list -> e .)
    FIM             reduce using rule 19 (e_list -> e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    XOR             shift and go to state 42
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48


state 55

    (14) ciclo_for -> PARA ID EM . [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM

    [               shift and go to state 74


state 56

    (15) if -> SE e ENTAO . com_list FIM_SE
    (16) if -> SE e ENTAO . com_list SENAO com_list FIM_SE
    (4) com_list -> . command
    (5) com_list -> . com_list command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    com_list                       shift and go to state 75
    command                        shift and go to state 3
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 57

    (7) command -> V STRING ATRIBUICAO var_list .
    (18) var_list -> var_list . , VAR

    V               reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    ESCREVER        reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    ID              reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    PARA            reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    SE              reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    ;               reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    FIM_SE          reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    SENAO           reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    FIM             reduce using rule 7 (command -> V STRING ATRIBUICAO var_list .)
    ,               shift and go to state 49


state 58

    (27) e -> e * e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    *               reduce using rule 27 (e -> e * e .)
    /               reduce using rule 27 (e -> e * e .)
    +               reduce using rule 27 (e -> e * e .)
    -               reduce using rule 27 (e -> e * e .)
    OR              reduce using rule 27 (e -> e * e .)
    AND             reduce using rule 27 (e -> e * e .)
    XOR             reduce using rule 27 (e -> e * e .)
    SMALLER         reduce using rule 27 (e -> e * e .)
    SMALLER_EQUAL   reduce using rule 27 (e -> e * e .)
    BIGGER          reduce using rule 27 (e -> e * e .)
    BIGGER_EQUAL    reduce using rule 27 (e -> e * e .)
    EQUAL           reduce using rule 27 (e -> e * e .)
    NOT_EQUAL       reduce using rule 27 (e -> e * e .)
    V               reduce using rule 27 (e -> e * e .)
    ESCREVER        reduce using rule 27 (e -> e * e .)
    ID              reduce using rule 27 (e -> e * e .)
    PARA            reduce using rule 27 (e -> e * e .)
    SE              reduce using rule 27 (e -> e * e .)
    ;               reduce using rule 27 (e -> e * e .)
    FIM_SE          reduce using rule 27 (e -> e * e .)
    SENAO           reduce using rule 27 (e -> e * e .)
    FIM             reduce using rule 27 (e -> e * e .)
    ENTAO           reduce using rule 27 (e -> e * e .)
    )               reduce using rule 27 (e -> e * e .)
    ,               reduce using rule 27 (e -> e * e .)

  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 59

    (28) e -> e / e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    *               reduce using rule 28 (e -> e / e .)
    /               reduce using rule 28 (e -> e / e .)
    +               reduce using rule 28 (e -> e / e .)
    -               reduce using rule 28 (e -> e / e .)
    OR              reduce using rule 28 (e -> e / e .)
    AND             reduce using rule 28 (e -> e / e .)
    XOR             reduce using rule 28 (e -> e / e .)
    SMALLER         reduce using rule 28 (e -> e / e .)
    SMALLER_EQUAL   reduce using rule 28 (e -> e / e .)
    BIGGER          reduce using rule 28 (e -> e / e .)
    BIGGER_EQUAL    reduce using rule 28 (e -> e / e .)
    EQUAL           reduce using rule 28 (e -> e / e .)
    NOT_EQUAL       reduce using rule 28 (e -> e / e .)
    V               reduce using rule 28 (e -> e / e .)
    ESCREVER        reduce using rule 28 (e -> e / e .)
    ID              reduce using rule 28 (e -> e / e .)
    PARA            reduce using rule 28 (e -> e / e .)
    SE              reduce using rule 28 (e -> e / e .)
    ;               reduce using rule 28 (e -> e / e .)
    FIM_SE          reduce using rule 28 (e -> e / e .)
    SENAO           reduce using rule 28 (e -> e / e .)
    FIM             reduce using rule 28 (e -> e / e .)
    ENTAO           reduce using rule 28 (e -> e / e .)
    )               reduce using rule 28 (e -> e / e .)
    ,               reduce using rule 28 (e -> e / e .)

  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 60

    (29) e -> e + e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    +               reduce using rule 29 (e -> e + e .)
    -               reduce using rule 29 (e -> e + e .)
    OR              reduce using rule 29 (e -> e + e .)
    AND             reduce using rule 29 (e -> e + e .)
    XOR             reduce using rule 29 (e -> e + e .)
    SMALLER         reduce using rule 29 (e -> e + e .)
    SMALLER_EQUAL   reduce using rule 29 (e -> e + e .)
    BIGGER          reduce using rule 29 (e -> e + e .)
    BIGGER_EQUAL    reduce using rule 29 (e -> e + e .)
    EQUAL           reduce using rule 29 (e -> e + e .)
    NOT_EQUAL       reduce using rule 29 (e -> e + e .)
    V               reduce using rule 29 (e -> e + e .)
    ESCREVER        reduce using rule 29 (e -> e + e .)
    ID              reduce using rule 29 (e -> e + e .)
    PARA            reduce using rule 29 (e -> e + e .)
    SE              reduce using rule 29 (e -> e + e .)
    ;               reduce using rule 29 (e -> e + e .)
    FIM_SE          reduce using rule 29 (e -> e + e .)
    SENAO           reduce using rule 29 (e -> e + e .)
    FIM             reduce using rule 29 (e -> e + e .)
    ENTAO           reduce using rule 29 (e -> e + e .)
    )               reduce using rule 29 (e -> e + e .)
    ,               reduce using rule 29 (e -> e + e .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 29 (e -> e + e .) ]
  ! /               [ reduce using rule 29 (e -> e + e .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 61

    (30) e -> e - e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    +               reduce using rule 30 (e -> e - e .)
    -               reduce using rule 30 (e -> e - e .)
    OR              reduce using rule 30 (e -> e - e .)
    AND             reduce using rule 30 (e -> e - e .)
    XOR             reduce using rule 30 (e -> e - e .)
    SMALLER         reduce using rule 30 (e -> e - e .)
    SMALLER_EQUAL   reduce using rule 30 (e -> e - e .)
    BIGGER          reduce using rule 30 (e -> e - e .)
    BIGGER_EQUAL    reduce using rule 30 (e -> e - e .)
    EQUAL           reduce using rule 30 (e -> e - e .)
    NOT_EQUAL       reduce using rule 30 (e -> e - e .)
    V               reduce using rule 30 (e -> e - e .)
    ESCREVER        reduce using rule 30 (e -> e - e .)
    ID              reduce using rule 30 (e -> e - e .)
    PARA            reduce using rule 30 (e -> e - e .)
    SE              reduce using rule 30 (e -> e - e .)
    ;               reduce using rule 30 (e -> e - e .)
    FIM_SE          reduce using rule 30 (e -> e - e .)
    SENAO           reduce using rule 30 (e -> e - e .)
    FIM             reduce using rule 30 (e -> e - e .)
    ENTAO           reduce using rule 30 (e -> e - e .)
    )               reduce using rule 30 (e -> e - e .)
    ,               reduce using rule 30 (e -> e - e .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 30 (e -> e - e .) ]
  ! /               [ reduce using rule 30 (e -> e - e .) ]
  ! +               [ shift and go to state 38 ]
  ! -               [ shift and go to state 39 ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 62

    (32) e -> e OR e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 32 (e -> e OR e .)
    XOR             reduce using rule 32 (e -> e OR e .)
    V               reduce using rule 32 (e -> e OR e .)
    ESCREVER        reduce using rule 32 (e -> e OR e .)
    ID              reduce using rule 32 (e -> e OR e .)
    PARA            reduce using rule 32 (e -> e OR e .)
    SE              reduce using rule 32 (e -> e OR e .)
    ;               reduce using rule 32 (e -> e OR e .)
    FIM_SE          reduce using rule 32 (e -> e OR e .)
    SENAO           reduce using rule 32 (e -> e OR e .)
    FIM             reduce using rule 32 (e -> e OR e .)
    ENTAO           reduce using rule 32 (e -> e OR e .)
    )               reduce using rule 32 (e -> e OR e .)
    ,               reduce using rule 32 (e -> e OR e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    AND             shift and go to state 41
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48

  ! *               [ reduce using rule 32 (e -> e OR e .) ]
  ! /               [ reduce using rule 32 (e -> e OR e .) ]
  ! +               [ reduce using rule 32 (e -> e OR e .) ]
  ! -               [ reduce using rule 32 (e -> e OR e .) ]
  ! AND             [ reduce using rule 32 (e -> e OR e .) ]
  ! SMALLER         [ reduce using rule 32 (e -> e OR e .) ]
  ! SMALLER_EQUAL   [ reduce using rule 32 (e -> e OR e .) ]
  ! BIGGER          [ reduce using rule 32 (e -> e OR e .) ]
  ! BIGGER_EQUAL    [ reduce using rule 32 (e -> e OR e .) ]
  ! EQUAL           [ reduce using rule 32 (e -> e OR e .) ]
  ! NOT_EQUAL       [ reduce using rule 32 (e -> e OR e .) ]
  ! OR              [ shift and go to state 40 ]
  ! XOR             [ shift and go to state 42 ]


state 63

    (33) e -> e AND e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 33 (e -> e AND e .)
    AND             reduce using rule 33 (e -> e AND e .)
    XOR             reduce using rule 33 (e -> e AND e .)
    V               reduce using rule 33 (e -> e AND e .)
    ESCREVER        reduce using rule 33 (e -> e AND e .)
    ID              reduce using rule 33 (e -> e AND e .)
    PARA            reduce using rule 33 (e -> e AND e .)
    SE              reduce using rule 33 (e -> e AND e .)
    ;               reduce using rule 33 (e -> e AND e .)
    FIM_SE          reduce using rule 33 (e -> e AND e .)
    SENAO           reduce using rule 33 (e -> e AND e .)
    FIM             reduce using rule 33 (e -> e AND e .)
    ENTAO           reduce using rule 33 (e -> e AND e .)
    )               reduce using rule 33 (e -> e AND e .)
    ,               reduce using rule 33 (e -> e AND e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48

  ! *               [ reduce using rule 33 (e -> e AND e .) ]
  ! /               [ reduce using rule 33 (e -> e AND e .) ]
  ! +               [ reduce using rule 33 (e -> e AND e .) ]
  ! -               [ reduce using rule 33 (e -> e AND e .) ]
  ! SMALLER         [ reduce using rule 33 (e -> e AND e .) ]
  ! SMALLER_EQUAL   [ reduce using rule 33 (e -> e AND e .) ]
  ! BIGGER          [ reduce using rule 33 (e -> e AND e .) ]
  ! BIGGER_EQUAL    [ reduce using rule 33 (e -> e AND e .) ]
  ! EQUAL           [ reduce using rule 33 (e -> e AND e .) ]
  ! NOT_EQUAL       [ reduce using rule 33 (e -> e AND e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]


state 64

    (34) e -> e XOR e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 34 (e -> e XOR e .)
    XOR             reduce using rule 34 (e -> e XOR e .)
    V               reduce using rule 34 (e -> e XOR e .)
    ESCREVER        reduce using rule 34 (e -> e XOR e .)
    ID              reduce using rule 34 (e -> e XOR e .)
    PARA            reduce using rule 34 (e -> e XOR e .)
    SE              reduce using rule 34 (e -> e XOR e .)
    ;               reduce using rule 34 (e -> e XOR e .)
    FIM_SE          reduce using rule 34 (e -> e XOR e .)
    SENAO           reduce using rule 34 (e -> e XOR e .)
    FIM             reduce using rule 34 (e -> e XOR e .)
    ENTAO           reduce using rule 34 (e -> e XOR e .)
    )               reduce using rule 34 (e -> e XOR e .)
    ,               reduce using rule 34 (e -> e XOR e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    AND             shift and go to state 41
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48

  ! *               [ reduce using rule 34 (e -> e XOR e .) ]
  ! /               [ reduce using rule 34 (e -> e XOR e .) ]
  ! +               [ reduce using rule 34 (e -> e XOR e .) ]
  ! -               [ reduce using rule 34 (e -> e XOR e .) ]
  ! AND             [ reduce using rule 34 (e -> e XOR e .) ]
  ! SMALLER         [ reduce using rule 34 (e -> e XOR e .) ]
  ! SMALLER_EQUAL   [ reduce using rule 34 (e -> e XOR e .) ]
  ! BIGGER          [ reduce using rule 34 (e -> e XOR e .) ]
  ! BIGGER_EQUAL    [ reduce using rule 34 (e -> e XOR e .) ]
  ! EQUAL           [ reduce using rule 34 (e -> e XOR e .) ]
  ! NOT_EQUAL       [ reduce using rule 34 (e -> e XOR e .) ]
  ! OR              [ shift and go to state 40 ]
  ! XOR             [ shift and go to state 42 ]


state 65

    (36) condicao -> e SMALLER e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 36 (condicao -> e SMALLER e .)
    AND             reduce using rule 36 (condicao -> e SMALLER e .)
    XOR             reduce using rule 36 (condicao -> e SMALLER e .)
    SMALLER         reduce using rule 36 (condicao -> e SMALLER e .)
    SMALLER_EQUAL   reduce using rule 36 (condicao -> e SMALLER e .)
    BIGGER          reduce using rule 36 (condicao -> e SMALLER e .)
    BIGGER_EQUAL    reduce using rule 36 (condicao -> e SMALLER e .)
    EQUAL           reduce using rule 36 (condicao -> e SMALLER e .)
    NOT_EQUAL       reduce using rule 36 (condicao -> e SMALLER e .)
    V               reduce using rule 36 (condicao -> e SMALLER e .)
    ESCREVER        reduce using rule 36 (condicao -> e SMALLER e .)
    ID              reduce using rule 36 (condicao -> e SMALLER e .)
    PARA            reduce using rule 36 (condicao -> e SMALLER e .)
    SE              reduce using rule 36 (condicao -> e SMALLER e .)
    ;               reduce using rule 36 (condicao -> e SMALLER e .)
    FIM_SE          reduce using rule 36 (condicao -> e SMALLER e .)
    SENAO           reduce using rule 36 (condicao -> e SMALLER e .)
    FIM             reduce using rule 36 (condicao -> e SMALLER e .)
    ENTAO           reduce using rule 36 (condicao -> e SMALLER e .)
    )               reduce using rule 36 (condicao -> e SMALLER e .)
    ,               reduce using rule 36 (condicao -> e SMALLER e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! *               [ reduce using rule 36 (condicao -> e SMALLER e .) ]
  ! /               [ reduce using rule 36 (condicao -> e SMALLER e .) ]
  ! +               [ reduce using rule 36 (condicao -> e SMALLER e .) ]
  ! -               [ reduce using rule 36 (condicao -> e SMALLER e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 66

    (37) condicao -> e SMALLER_EQUAL e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    AND             reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    XOR             reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    SMALLER         reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    SMALLER_EQUAL   reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    BIGGER          reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    BIGGER_EQUAL    reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    EQUAL           reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    NOT_EQUAL       reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    V               reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    ESCREVER        reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    ID              reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    PARA            reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    SE              reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    ;               reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    FIM_SE          reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    SENAO           reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    FIM             reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    ENTAO           reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    )               reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    ,               reduce using rule 37 (condicao -> e SMALLER_EQUAL e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! *               [ reduce using rule 37 (condicao -> e SMALLER_EQUAL e .) ]
  ! /               [ reduce using rule 37 (condicao -> e SMALLER_EQUAL e .) ]
  ! +               [ reduce using rule 37 (condicao -> e SMALLER_EQUAL e .) ]
  ! -               [ reduce using rule 37 (condicao -> e SMALLER_EQUAL e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 67

    (38) condicao -> e BIGGER e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 38 (condicao -> e BIGGER e .)
    AND             reduce using rule 38 (condicao -> e BIGGER e .)
    XOR             reduce using rule 38 (condicao -> e BIGGER e .)
    SMALLER         reduce using rule 38 (condicao -> e BIGGER e .)
    SMALLER_EQUAL   reduce using rule 38 (condicao -> e BIGGER e .)
    BIGGER          reduce using rule 38 (condicao -> e BIGGER e .)
    BIGGER_EQUAL    reduce using rule 38 (condicao -> e BIGGER e .)
    EQUAL           reduce using rule 38 (condicao -> e BIGGER e .)
    NOT_EQUAL       reduce using rule 38 (condicao -> e BIGGER e .)
    V               reduce using rule 38 (condicao -> e BIGGER e .)
    ESCREVER        reduce using rule 38 (condicao -> e BIGGER e .)
    ID              reduce using rule 38 (condicao -> e BIGGER e .)
    PARA            reduce using rule 38 (condicao -> e BIGGER e .)
    SE              reduce using rule 38 (condicao -> e BIGGER e .)
    ;               reduce using rule 38 (condicao -> e BIGGER e .)
    FIM_SE          reduce using rule 38 (condicao -> e BIGGER e .)
    SENAO           reduce using rule 38 (condicao -> e BIGGER e .)
    FIM             reduce using rule 38 (condicao -> e BIGGER e .)
    ENTAO           reduce using rule 38 (condicao -> e BIGGER e .)
    )               reduce using rule 38 (condicao -> e BIGGER e .)
    ,               reduce using rule 38 (condicao -> e BIGGER e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! *               [ reduce using rule 38 (condicao -> e BIGGER e .) ]
  ! /               [ reduce using rule 38 (condicao -> e BIGGER e .) ]
  ! +               [ reduce using rule 38 (condicao -> e BIGGER e .) ]
  ! -               [ reduce using rule 38 (condicao -> e BIGGER e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 68

    (39) condicao -> e BIGGER_EQUAL e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    AND             reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    XOR             reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    SMALLER         reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    SMALLER_EQUAL   reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    BIGGER          reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    BIGGER_EQUAL    reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    EQUAL           reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    NOT_EQUAL       reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    V               reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    ESCREVER        reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    ID              reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    PARA            reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    SE              reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    ;               reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    FIM_SE          reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    SENAO           reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    FIM             reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    ENTAO           reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    )               reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    ,               reduce using rule 39 (condicao -> e BIGGER_EQUAL e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! *               [ reduce using rule 39 (condicao -> e BIGGER_EQUAL e .) ]
  ! /               [ reduce using rule 39 (condicao -> e BIGGER_EQUAL e .) ]
  ! +               [ reduce using rule 39 (condicao -> e BIGGER_EQUAL e .) ]
  ! -               [ reduce using rule 39 (condicao -> e BIGGER_EQUAL e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 69

    (40) condicao -> e EQUAL e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 40 (condicao -> e EQUAL e .)
    AND             reduce using rule 40 (condicao -> e EQUAL e .)
    XOR             reduce using rule 40 (condicao -> e EQUAL e .)
    SMALLER         reduce using rule 40 (condicao -> e EQUAL e .)
    SMALLER_EQUAL   reduce using rule 40 (condicao -> e EQUAL e .)
    BIGGER          reduce using rule 40 (condicao -> e EQUAL e .)
    BIGGER_EQUAL    reduce using rule 40 (condicao -> e EQUAL e .)
    EQUAL           reduce using rule 40 (condicao -> e EQUAL e .)
    NOT_EQUAL       reduce using rule 40 (condicao -> e EQUAL e .)
    V               reduce using rule 40 (condicao -> e EQUAL e .)
    ESCREVER        reduce using rule 40 (condicao -> e EQUAL e .)
    ID              reduce using rule 40 (condicao -> e EQUAL e .)
    PARA            reduce using rule 40 (condicao -> e EQUAL e .)
    SE              reduce using rule 40 (condicao -> e EQUAL e .)
    ;               reduce using rule 40 (condicao -> e EQUAL e .)
    FIM_SE          reduce using rule 40 (condicao -> e EQUAL e .)
    SENAO           reduce using rule 40 (condicao -> e EQUAL e .)
    FIM             reduce using rule 40 (condicao -> e EQUAL e .)
    ENTAO           reduce using rule 40 (condicao -> e EQUAL e .)
    )               reduce using rule 40 (condicao -> e EQUAL e .)
    ,               reduce using rule 40 (condicao -> e EQUAL e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! *               [ reduce using rule 40 (condicao -> e EQUAL e .) ]
  ! /               [ reduce using rule 40 (condicao -> e EQUAL e .) ]
  ! +               [ reduce using rule 40 (condicao -> e EQUAL e .) ]
  ! -               [ reduce using rule 40 (condicao -> e EQUAL e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 70

    (41) condicao -> e NOT_EQUAL e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    OR              reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    AND             reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    XOR             reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    SMALLER         reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    SMALLER_EQUAL   reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    BIGGER          reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    BIGGER_EQUAL    reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    EQUAL           reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    NOT_EQUAL       reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    V               reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    ESCREVER        reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    ID              reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    PARA            reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    SE              reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    ;               reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    FIM_SE          reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    SENAO           reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    FIM             reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    ENTAO           reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    )               reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    ,               reduce using rule 41 (condicao -> e NOT_EQUAL e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39

  ! *               [ reduce using rule 41 (condicao -> e NOT_EQUAL e .) ]
  ! /               [ reduce using rule 41 (condicao -> e NOT_EQUAL e .) ]
  ! +               [ reduce using rule 41 (condicao -> e NOT_EQUAL e .) ]
  ! -               [ reduce using rule 41 (condicao -> e NOT_EQUAL e .) ]
  ! OR              [ shift and go to state 40 ]
  ! AND             [ shift and go to state 41 ]
  ! XOR             [ shift and go to state 42 ]
  ! SMALLER         [ shift and go to state 43 ]
  ! SMALLER_EQUAL   [ shift and go to state 44 ]
  ! BIGGER          [ shift and go to state 45 ]
  ! BIGGER_EQUAL    [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 47 ]
  ! NOT_EQUAL       [ shift and go to state 48 ]


state 71

    (18) var_list -> var_list , VAR .

    ,               reduce using rule 18 (var_list -> var_list , VAR .)
    V               reduce using rule 18 (var_list -> var_list , VAR .)
    ESCREVER        reduce using rule 18 (var_list -> var_list , VAR .)
    ID              reduce using rule 18 (var_list -> var_list , VAR .)
    PARA            reduce using rule 18 (var_list -> var_list , VAR .)
    SE              reduce using rule 18 (var_list -> var_list , VAR .)
    ;               reduce using rule 18 (var_list -> var_list , VAR .)
    FIM_SE          reduce using rule 18 (var_list -> var_list , VAR .)
    SENAO           reduce using rule 18 (var_list -> var_list , VAR .)
    FIM             reduce using rule 18 (var_list -> var_list , VAR .)


state 72

    (35) e -> ( e ) .

    *               reduce using rule 35 (e -> ( e ) .)
    /               reduce using rule 35 (e -> ( e ) .)
    +               reduce using rule 35 (e -> ( e ) .)
    -               reduce using rule 35 (e -> ( e ) .)
    OR              reduce using rule 35 (e -> ( e ) .)
    AND             reduce using rule 35 (e -> ( e ) .)
    XOR             reduce using rule 35 (e -> ( e ) .)
    SMALLER         reduce using rule 35 (e -> ( e ) .)
    SMALLER_EQUAL   reduce using rule 35 (e -> ( e ) .)
    BIGGER          reduce using rule 35 (e -> ( e ) .)
    BIGGER_EQUAL    reduce using rule 35 (e -> ( e ) .)
    EQUAL           reduce using rule 35 (e -> ( e ) .)
    NOT_EQUAL       reduce using rule 35 (e -> ( e ) .)
    V               reduce using rule 35 (e -> ( e ) .)
    ESCREVER        reduce using rule 35 (e -> ( e ) .)
    ID              reduce using rule 35 (e -> ( e ) .)
    PARA            reduce using rule 35 (e -> ( e ) .)
    SE              reduce using rule 35 (e -> ( e ) .)
    ;               reduce using rule 35 (e -> ( e ) .)
    FIM_SE          reduce using rule 35 (e -> ( e ) .)
    SENAO           reduce using rule 35 (e -> ( e ) .)
    FIM             reduce using rule 35 (e -> ( e ) .)
    ENTAO           reduce using rule 35 (e -> ( e ) .)
    )               reduce using rule 35 (e -> ( e ) .)
    ,               reduce using rule 35 (e -> ( e ) .)


state 73

    (20) e_list -> e_list , . e
    (21) e -> . ID
    (22) e -> . REAL
    (23) e -> . INTEIRO
    (24) e -> . CARACTER
    (25) e -> . condicao
    (26) e -> . - e
    (27) e -> . e * e
    (28) e -> . e / e
    (29) e -> . e + e
    (30) e -> . e - e
    (31) e -> . logico
    (32) e -> . e OR e
    (33) e -> . e AND e
    (34) e -> . e XOR e
    (35) e -> . ( e )
    (36) condicao -> . e SMALLER e
    (37) condicao -> . e SMALLER_EQUAL e
    (38) condicao -> . e BIGGER e
    (39) condicao -> . e BIGGER_EQUAL e
    (40) condicao -> . e EQUAL e
    (41) condicao -> . e NOT_EQUAL e
    (42) logico -> . TRUE
    (43) logico -> . FALSE
    (44) logico -> . NOT logico

    ID              shift and go to state 18
    REAL            shift and go to state 19
    INTEIRO         shift and go to state 20
    CARACTER        shift and go to state 21
    -               shift and go to state 23
    (               shift and go to state 25
    TRUE            shift and go to state 27
    FALSE           shift and go to state 28
    NOT             shift and go to state 29

    e                              shift and go to state 76
    condicao                       shift and go to state 22
    logico                         shift and go to state 24

state 74

    (14) ciclo_for -> PARA ID EM [ . INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM

    INTEIRO         shift and go to state 77


state 75

    (15) if -> SE e ENTAO com_list . FIM_SE
    (16) if -> SE e ENTAO com_list . SENAO com_list FIM_SE
    (5) com_list -> com_list . command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    FIM_SE          shift and go to state 78
    SENAO           shift and go to state 79
    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    command                        shift and go to state 13
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 76

    (20) e_list -> e_list , e .
    (27) e -> e . * e
    (28) e -> e . / e
    (29) e -> e . + e
    (30) e -> e . - e
    (32) e -> e . OR e
    (33) e -> e . AND e
    (34) e -> e . XOR e
    (36) condicao -> e . SMALLER e
    (37) condicao -> e . SMALLER_EQUAL e
    (38) condicao -> e . BIGGER e
    (39) condicao -> e . BIGGER_EQUAL e
    (40) condicao -> e . EQUAL e
    (41) condicao -> e . NOT_EQUAL e

    ,               reduce using rule 20 (e_list -> e_list , e .)
    V               reduce using rule 20 (e_list -> e_list , e .)
    ESCREVER        reduce using rule 20 (e_list -> e_list , e .)
    ID              reduce using rule 20 (e_list -> e_list , e .)
    PARA            reduce using rule 20 (e_list -> e_list , e .)
    SE              reduce using rule 20 (e_list -> e_list , e .)
    ;               reduce using rule 20 (e_list -> e_list , e .)
    FIM_SE          reduce using rule 20 (e_list -> e_list , e .)
    SENAO           reduce using rule 20 (e_list -> e_list , e .)
    FIM             reduce using rule 20 (e_list -> e_list , e .)
    *               shift and go to state 36
    /               shift and go to state 37
    +               shift and go to state 38
    -               shift and go to state 39
    OR              shift and go to state 40
    AND             shift and go to state 41
    XOR             shift and go to state 42
    SMALLER         shift and go to state 43
    SMALLER_EQUAL   shift and go to state 44
    BIGGER          shift and go to state 45
    BIGGER_EQUAL    shift and go to state 46
    EQUAL           shift and go to state 47
    NOT_EQUAL       shift and go to state 48


state 77

    (14) ciclo_for -> PARA ID EM [ INTEIRO . ELIPSIS INTEIRO ] FAZER com_list FIM

    ELIPSIS         shift and go to state 80


state 78

    (15) if -> SE e ENTAO com_list FIM_SE .

    V               reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    ESCREVER        reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    ID              reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    PARA            reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    SE              reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    ;               reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    FIM_SE          reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    SENAO           reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)
    FIM             reduce using rule 15 (if -> SE e ENTAO com_list FIM_SE .)


state 79

    (16) if -> SE e ENTAO com_list SENAO . com_list FIM_SE
    (4) com_list -> . command
    (5) com_list -> . com_list command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    com_list                       shift and go to state 81
    command                        shift and go to state 3
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 80

    (14) ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS . INTEIRO ] FAZER com_list FIM

    INTEIRO         shift and go to state 82


state 81

    (16) if -> SE e ENTAO com_list SENAO com_list . FIM_SE
    (5) com_list -> com_list . command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    FIM_SE          shift and go to state 83
    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    command                        shift and go to state 13
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 82

    (14) ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO . ] FAZER com_list FIM

    ]               shift and go to state 84


state 83

    (16) if -> SE e ENTAO com_list SENAO com_list FIM_SE .

    V               reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    ESCREVER        reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    ID              reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    PARA            reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    SE              reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    ;               reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    FIM_SE          reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    SENAO           reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)
    FIM             reduce using rule 16 (if -> SE e ENTAO com_list SENAO com_list FIM_SE .)


state 84

    (14) ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] . FAZER com_list FIM

    FAZER           shift and go to state 85


state 85

    (14) ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER . com_list FIM
    (4) com_list -> . command
    (5) com_list -> . com_list command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    com_list                       shift and go to state 86
    command                        shift and go to state 3
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 86

    (14) ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list . FIM
    (5) com_list -> com_list . command
    (6) command -> . V STRING
    (7) command -> . V STRING ATRIBUICAO var_list
    (8) command -> . ESCREVER STRING ;
    (9) command -> . ESCREVER e
    (10) command -> . ESCREVER var_list
    (11) command -> . ID ATRIBUICAO e_list
    (12) command -> . ciclo_for
    (13) command -> . if
    (14) ciclo_for -> . PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM
    (15) if -> . SE e ENTAO com_list FIM_SE
    (16) if -> . SE e ENTAO com_list SENAO com_list FIM_SE

    FIM             shift and go to state 87
    V               shift and go to state 5
    ESCREVER        shift and go to state 6
    ID              shift and go to state 7
    PARA            shift and go to state 10
    SE              shift and go to state 11

    command                        shift and go to state 13
    ciclo_for                      shift and go to state 8
    if                             shift and go to state 9

state 87

    (14) ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .

    V               reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    ESCREVER        reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    ID              reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    PARA            reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    SE              reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    ;               reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    FIM_SE          reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    SENAO           reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)
    FIM             reduce using rule 14 (ciclo_for -> PARA ID EM [ INTEIRO ELIPSIS INTEIRO ] FAZER com_list FIM .)

